# 15. 3Sum

解題思路：
1. first sort the array nums
2. if nums.size() < 3                   ----> no ans
3. if first element of sorted array > 0 ----> no sum can be negative
4. if non of above situation is satisfied ----> can find ans
    a. traverse nums
        if nums[i-1] == nums[i] continue
        else find -nums[i]

//c++ sort array + 2 pointer
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> ans;

        sort(nums.begin(), nums.end());
        showArray(nums);
        if ((nums.size() >= 3) && (nums[0] <= 0)) {
            for (int i = 0; i < nums.size(); i++) {
                if (i != 0 && nums[i] == nums[i-1]) continue;
                
                int l = i + 1, r = nums.size() - 1;
                int target = -nums[i], sum;

                while (l < r) {
                    sum = nums[l] + nums[r];
                    if (sum > target) r--;
                    else if (sum < target) l++;
                    else {
                        ans.push_back({nums[i], nums[l], nums[r]});
                        int validL = nums[l], validR = nums[r];
                        while (l < r && nums[l] == validL) l++;
                        while (l < r && nums[r] == validR) r--;
                    }
                }
            }
        }
        return ans;
    }
};

//c++ nested loop + unordered_set remove duplicate
